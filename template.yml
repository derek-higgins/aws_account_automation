Transform: AWS::Serverless-2016-10-31
Resources:
  s3PublicBlock:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: s3PublicBlock
      CodeUri: src/s3PublicBlock
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - sts:assumeRole
              Resource: '*'
  s3PublicBlockLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${s3PublicBlock}
  Ec2Protections:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: Ec2Protections
      CodeUri: src/ec2Protections
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - sts:assumeRole
              Resource: '*'
  Ec2ProtectionsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${Ec2Protections}
  removeDefaulVPC:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: removeDefaulVPC
      CodeUri: src/removeDefaultVPC
      Handler: handler.handler
      Runtime: python3.11
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - sts:assumeRole
              Resource: '*'
  removeDefaulVPCLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${removeDefaulVPC}
  AccountAutomationSM:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: NewAccountControls
        States:
          NewAccountControls:
            Type: Parallel
            Branches:
              - StartAt: enable S3 public block
                States:
                  enable S3 public block:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    OutputPath: $.Payload
                    Parameters:
                      Payload.$: $
                      FunctionName: ${enableS3PublicBlock}
                    Retry:
                      - ErrorEquals:
                          - Lambda.ServiceException
                          - Lambda.AWSLambdaException
                          - Lambda.SdkClientException
                          - Lambda.TooManyRequestsException
                        IntervalSeconds: 1
                        MaxAttempts: 3
                        BackoffRate: 2
                    End: true
              - StartAt: enable ec2 protections
                States:
                  enable ec2 protections:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    Parameters:
                      Payload.$: $
                      FunctionName: ${EnalbeEc2Protections}
                    End: true
              - StartAt: remove default vpc
                States:
                  remove default vpc:
                    Type: Task
                    Resource: arn:aws:states:::lambda:invoke
                    OutputPath: $.Payload
                    Parameters:
                      Payload.$: $
                      FunctionName: ${removeDefaultVPC}
                    Retry:
                      - ErrorEquals:
                          - Lambda.ServiceException
                          - Lambda.AWSLambdaException
                          - Lambda.SdkClientException
                          - Lambda.TooManyRequestsException
                        IntervalSeconds: 1
                        MaxAttempts: 3
                        BackoffRate: 2
                    End: true
            Next: Success
            InputPath: $.serviceEventDetails.createAccountStatus
          Success:
            Type: Succeed
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt AccountAutomationSMLogGroup.Arn
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogDelivery
                - logs:GetLogDelivery
                - logs:UpdateLogDelivery
                - logs:DeleteLogDelivery
                - logs:ListLogDeliveries
                - logs:PutResourcePolicy
                - logs:DescribeResourcePolicies
                - logs:DescribeLogGroups
              Resource: '*'
        - LambdaInvokePolicy:
            FunctionName: !Ref s3PublicBlock
        - LambdaInvokePolicy:
            FunctionName: !Ref Ec2Protections
        - LambdaInvokePolicy:
            FunctionName: !Ref removeDefaulVPC
      Tracing:
        Enabled: true
      Type: STANDARD
      DefinitionSubstitutions:
        LambdaFunction1: !Ref AWS::NoValue
        enableS3PublicBlock: !GetAtt s3PublicBlock.Arn
        EnalbeEc2Protections: !GetAtt Ec2Protections.Arn
        removeDefaultVPC: !GetAtt removeDefaulVPC.Arn
  AccountAutomationSMLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /aws/vendedlogs/states/${AWS::StackName}-${ResourceId}-Logs
        - ResourceId: AccountAutomationSM
  AccountCreationRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - organizations.amazonaws.com
        eventName:
          - CreateAccountResult
        detail:
          serviceEventDetails:
            createAccountStatus:
              state:
                - SUCCEEDED
      Targets:
        - Id: !GetAtt AccountAutomationSM.Name
          Arn: !Ref AccountAutomationSM
          RoleArn: !GetAtt AccountCreationRuleToAccountAutomationSMRole.Arn
  AccountCreationRuleToAccountAutomationSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub events.${AWS::URLSuffix}
          Action: sts:AssumeRole
          Condition:
            ArnLike:
              aws:SourceArn: !Sub
                - arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/${AWS::StackName}-${ResourceId}-*
                - ResourceId: AccountCreationRule
  AccountCreationRuleToAccountAutomationSMConnector:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Ref AccountAutomationSM
        Version: '2012-10-17'
      Roles:
        - !Ref AccountCreationRuleToAccountAutomationSMRole